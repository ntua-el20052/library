//3.1.1
CREATE VIEW loans_per_school AS
SELECT su.school_name, COUNT(*) AS total_loans
FROM borrowing b
JOIN goes_to h ON b.id = h.id
JOIN school_unit su ON h.school_name = su.school_name
WHERE YEAR(b.borrowing_date) = <year>
  AND MONTH(b.borrowing_date) = <month>
GROUP BY su.school_name;
//3.1.2
CREATE VIEW authors_of_category AS
SELECT DISTINCT a.author_name
FROM authors a
JOIN book_author ba ON a.author_id = ba.author_id
JOIN book_genre bg ON ba.isbn = bg.isbn
JOIN genres g ON bg.genre_id = g.genre_id;

CREATE VIEW teachers_borrowed_category AS
SELECT DISTINCT su.school_name, u.name
FROM school_unit su
JOIN goes_to h ON su.school_name = h.name
JOIN borrowing b ON h.id = b.id
JOIN books bk ON b.isbn = bk.isbn
JOIN book_genre bg ON bk.isbn = bg.isbn
JOIN genres g ON bg.genre_id = g.genre_id
JOIN user u ON b.id = u.id
WHERE b.borrowing_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)
  AND u.number = 2;
//3.1.3
CREATE VIEW young_teachers_most_books AS
SELECT u.name, u.age, COUNT(*) AS num_books_borrowed
FROM user u
JOIN borrowing b ON u.id = b.id
JOIN goes_to h ON b.id = h.id
JOIN school_unit su ON h.name = su.school_name
WHERE u.age < 40 AND u.number = 2
GROUP BY u.name, u.age
ORDER BY num_books_borrowed DESC;
//3.1.4
CREATE VIEW authors_not_borrowed AS
SELECT a.author_name
FROM authors a
LEFT JOIN book_author ba ON a.author_id = ba.author_id
LEFT JOIN books b ON ba.isbn = b.isbn
WHERE b.isbn IS NULL;
//3.1.5
CREATE VIEW handlers_same_number_of_books AS
SELECT h.id, COUNT(*) AS num_approvals
FROM handles h
JOIN borrowing b ON h.id = b.id
WHERE YEAR(b.borrowing_date) = <year>
GROUP BY h.id
HAVING num_approvals > 20
AND num_approvals = (
  SELECT COUNT(*) AS same_num_approvals
  FROM handles
  JOIN borrowing ON handles.id = borrowing.id
  WHERE handles.id = h.id
  AND YEAR(borrowing.borrowing_date) = <year>
  GROUP BY handles.id
)
//3.1.6
CREATE VIEW top_category_pairs AS
SELECT bg1.genre_id AS category1_id, g1.genre_name AS category1_name,
       bg2.genre_id AS category2_id, g2.genre_name AS category2_name,
       COUNT(*) AS num_borrowings
FROM book_genre bg1
JOIN book_genre bg2 ON bg1.isbn = bg2.isbn AND bg1.genre_id < bg2.genre_id
JOIN genres g1 ON bg1.genre_id = g1.genre_id
JOIN genres g2 ON bg2.genre_id = g2.genre_id
JOIN borrowing b ON bg1.isbn = b.isbn
GROUP BY bg1.genre_id, bg2.genre_id
ORDER BY num_borrowings DESC
LIMIT 3;
//3.1.7
CREATE VIEW authors_less_books AS
SELECT a1.author_id, a1.author_name, COUNT(*) AS num_books
FROM authors a1
JOIN book_author ba ON a1.author_id = ba.author_id
GROUP BY a1.author_id, a1.author_name
HAVING COUNT(*) >= (SELECT COUNT(*) - 5
                    FROM book_author
                    GROUP BY author_id
                    ORDER BY COUNT(*) DESC
                    LIMIT 1);
//3.2.1
CREATE VIEW books_info AS
SELECT b.title, a.author_name, g.genre_name, b.nmbr_of_copies, '<title_criteria>' AS search_title, '<category_criteria>' AS search_category, '<author_criteria>' AS search_author, <copies_criteria> AS search_copies
FROM books b
JOIN book_author ba ON b.isbn = ba.isbn
JOIN authors a ON ba.author_id = a.author_id
JOIN book_genre bg ON b.isbn = bg.isbn
JOIN genres g ON bg.genre_id = g.genre_id;
//3.2.2
CREATE VIEW delayed_borrowers AS
SELECT u.first_name, u.last_name, DATEDIFF(NOW(), MAX(borrowing_date)) AS days_delay
FROM `user` u
JOIN borrowing b ON u.id = b.id
GROUP BY u.id, u.first_name, u.last_name
HAVING MAX(borrowing_date) < CURDATE();
//3.2.3
CREATE VIEW average_ratings AS
SELECT r.id AS user_id, u.name AS user_name, g.genre_name AS category, AVG(r.likert_scale) AS average_rating,
       '<user_criteria>' AS search_user, '<category_criteria>' AS search_category
FROM review r
JOIN `user` u ON r.id = u.id
JOIN books b ON r.isbn = b.isbn
JOIN book_genre bg ON b.isbn = bg.isbn
JOIN genres g ON bg.genre_id = g.genre_id
GROUP BY r.id, u.name, g.genre_name;
